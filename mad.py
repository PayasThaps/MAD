# -*- coding: utf-8 -*-
"""MAD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zTMEIiy8loRa3_VR3yUpLdoMvXJ95ZBM
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
@st.cache
def load_data():
    file_path = "/content/Insight_Trek_Dataset_Round3.xlsx"  # Update with your file location
    data = pd.read_excel(file_path, sheet_name="Sales Data")
    return data

data = load_data()

# Sidebar filters
st.sidebar.header("Filters")
selected_location = st.sidebar.multiselect("Select Location", options=data["Location"].unique(), default=data["Location"].unique())
selected_event = st.sidebar.multiselect("Select Event Type", options=data["Event Type"].dropna().unique(), default=data["Event Type"].dropna().unique())
selected_sentiment = st.sidebar.multiselect("Select Economic Sentiment", options=data["Economic Sentiment"].unique(), default=data["Economic Sentiment"].unique())

# Filter data based on selections
filtered_data = data[
    (data["Location"].isin(selected_location)) &
    (data["Event Type"].isin(selected_event)) &
    (data["Economic Sentiment"].isin(selected_sentiment))
]

# Dashboard title
st.title("Mood Analytics Dashboard (MAD)")

# Revenue and Units Sold Trends
st.header("Revenue and Units Sold Trends")
revenue_trend = filtered_data.groupby("Date")["Revenue"].sum().sort_index()
units_trend = filtered_data.groupby("Date")["UnitsSold"].sum().sort_index()

fig, ax = plt.subplots()
ax.plot(revenue_trend, label="Revenue", marker="o")
ax.plot(units_trend, label="Units Sold", marker="x")
ax.set_title("Revenue and Units Sold Over Time")
ax.set_xlabel("Date")
ax.set_ylabel("Value")
ax.legend()
st.pyplot(fig)

# Event Type Analysis
st.header("Event Type Impact on Sales")
event_analysis = filtered_data.groupby("Event Type")["Revenue"].sum()
fig, ax = plt.subplots()
event_analysis.plot(kind="bar", ax=ax, color="skyblue")
ax.set_title("Revenue by Event Type")
ax.set_xlabel("Event Type")
ax.set_ylabel("Total Revenue")
st.pyplot(fig)

# Competitor Discounts and Hashtags
st.header("Competitor Analysis")
discount_analysis = filtered_data.groupby("Competitor Discount")["Revenue"].sum()
hashtag_analysis = filtered_data["Competitor Hashtags"].value_counts()

col1, col2 = st.columns(2)

with col1:
    st.subheader("Revenue by Competitor Discount")
    fig, ax = plt.subplots()
    discount_analysis.plot(kind="pie", autopct="%1.1f%%", ax=ax)
    ax.set_ylabel("")
    st.pyplot(fig)

with col2:
    st.subheader("Most Used Competitor Hashtags")
    fig, ax = plt.subplots()
    hashtag_analysis.plot(kind="bar", ax=ax, color="orange")
    ax.set_title("Competitor Hashtags Frequency")
    ax.set_xlabel("Hashtags")
    ax.set_ylabel("Frequency")
    st.pyplot(fig)

# Sentiment Analysis
st.header("Sentiment Analysis")
sentiment_analysis = filtered_data.groupby("Economic Sentiment")["Revenue"].sum()

fig, ax = plt.subplots()
sentiment_analysis.plot(kind="bar", ax=ax, color="green")
ax.set_title("Revenue by Economic Sentiment")
ax.set_xlabel("Economic Sentiment")
ax.set_ylabel("Total Revenue")
st.pyplot(fig)

# Category-Specific Performance
st.header("Category Performance")
category_performance = filtered_data.groupby("CategoryID")["Revenue"].sum().sort_values(ascending=False)

fig, ax = plt.subplots()
category_performance.plot(kind="bar", ax=ax, color="purple")
ax.set_title("Revenue by Category")
ax.set_xlabel("Category")
ax.set_ylabel("Total Revenue")
st.pyplot(fig)

# Add instructions
st.markdown("""
### How to use:
- Use the filters in the sidebar to explore the data.
- View trends, event impacts, and sentiment-based analyses.
""")